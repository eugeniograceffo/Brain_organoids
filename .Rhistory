theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)
ggsave("PCA_final_labels.png" , device=png, dpi = 600, bg = "transparent", width = 20, height = 12, units = "cm" )
ggplot(pcaData, aes(PC1, PC2, color=Treatment, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
geom_text_repel(aes(label = Tissue),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
theme(legend.position="none")
ggplot(pcaData, aes(PC1, PC2, color=Treatment, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
theme(legend.position="none")
ggplotly()
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
theme(legend.position="none")
ggplotly()
# make screeplot
## calculate the variance for each gene
rv <- rowVars(assay(vsd))
## select the ntop genes by variance
select <- order(rv, decreasing=TRUE)[seq_len(min(500, length(rv)))]
## perform a PCA on the data in assay(x) for the selected genes
pca <- prcomp(t(assay(vsd)[select,]))
## the contribution to the total variance for each component
percentVar <- pca$sdev^2 / sum( pca$sdev^2 )*100
##plot the "percentVar"
scree_plot=data.frame(percentVar)
scree_plot[,2]<- c(1:24)
scree_plot[,2]<- c(1:16)
colnames(scree_plot)<-c("variance","component_number")
ggplot(scree_plot, mapping=aes(x=component_number, y=variance))+geom_bar(stat="identity")+
ggtitle("Scree plot") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5)) +
ylab("% Variance")
### P-values distribution
## P-value histogram plot
res.df <- data.frame(Feature = rownames(res.df), res.df)
# Volcano Plot of results
library(EnhancedVolcano)
Volcano_list_genes <- Volcano_list %>%
separate(GeneID, c("delete","Gene"), sep="\\|", remove=FALSE, extra="drop", fill="right")%>% #splits multiple IDs on same row and keeps the right
dplyr::select(-delete)
# Mean vs Variance plot
tibble(mean=rowMeans(counts), var=rowVars(counts)) %>%
ggplot(aes(x=mean, y=var)) +
geom_point() +
geom_smooth(method="lm")
# make PCA
pca <- prcomp(t(counts), scale=T) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
# make PCA
pca <- prcomp(t(pcaData), scale=T) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
# make PCA
pca <- prcomp(t(countData), scale=T) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
# make PCA
pca <- prcomp(t(counts(dds)), scale=T) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
# make PCA
pca <- prcomp(t(counts(dds)), scale=F) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
#plot(pca$x[,1], pca$x[,2]) #2D plot of the first 2 Principal components (PCs are contained in x of PCA)
pca.var <- pca$sdev^2 # squared standard deviation, says how much variation in the original data each PC accounts for
pca.var.per <- round(pca.var/sum(pca.var)*100, 1) #percentages, more valuable info
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation") #scree plot
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
inner_join(sample_metadata, by = c("sample_name" = "sample_name"))
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
inner_join(colData, by = c("sample_name" = "Sample"))
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2])
ggplot(data=pca.data, aes(x=PC1,y=PC2, label = sample_name, color=batch, shape=disease)) +
geom_point(size = 4) +
labs(x=paste0("PC1: ",round(pca.var.per[1]),"%"),
y=paste0("PC2: ",round(pca.var.per[2]),"%")) +
geom_label_repel(box.padding = 0.5) +
theme_bw() +
#scale_color_lancet() +
#scale_fill_lancet() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("PCA") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5))
View(pca.data)
View(pcaData)
View(pca.data)
View(pcaData)
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
inner_join(pcaData, by = c("sample_name" = "name"))
ggplot(data=pca.data, aes(x=PC1,y=PC2, label = sample_name, color=batch, shape=disease)) +
geom_point(size = 4) +
labs(x=paste0("PC1: ",round(pca.var.per[1]),"%"),
y=paste0("PC2: ",round(pca.var.per[2]),"%")) +
geom_label_repel(box.padding = 0.5) +
theme_bw() +
#scale_color_lancet() +
#scale_fill_lancet() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("PCA") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5))
View(pca.data)
ggplot(data=pca.data, aes(x=PC1,y=PC2, label = hiPSC_line.line, color=study_day, shape=Treatment)) +
geom_point(size = 4) +
labs(x=paste0("PC1: ",round(pca.var.per[1]),"%"),
y=paste0("PC2: ",round(pca.var.per[2]),"%")) +
geom_label_repel(box.padding = 0.5) +
theme_bw() +
#scale_color_lancet() +
#scale_fill_lancet() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("PCA") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5))
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
left_join(pcaData, by = c("sample_name" = "name"))
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
right_join(pcaData, by = c("sample_name" = "name"))
meta <- select(pcaData, -PC1, -PC2)
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
right_join(meta, by = c("sample_name" = "name"))
ggplot(data=pca.data, aes(x=PC1,y=PC2, label = hiPSC_line.line, color=study_day, shape=Treatment)) +
geom_point(size = 4) +
labs(x=paste0("PC1: ",round(pca.var.per[1]),"%"),
y=paste0("PC2: ",round(pca.var.per[2]),"%")) +
geom_label_repel(box.padding = 0.5) +
theme_bw() +
#scale_color_lancet() +
#scale_fill_lancet() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("PCA") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5))
pcaData <- plotPCA(vsd, intgroup=c("Treatment", "study_day", "hiPSC_line.line"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("standard PCA - top 500 genes")
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Standard PCA - top 500 genes")
ggsave("PCA_final_labels.png" , device=png, dpi = 600, bg = "transparent", width = 20, height = 12, units = "cm" )
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Standard PCA - top 500 genes")
pca <- prcomp(t(counts(dds)), scale=F) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
#plot(pca$x[,1], pca$x[,2]) #2D plot of the first 2 Principal components (PCs are contained in x of PCA)
pca.var <- pca$sdev^2 # squared standard deviation, says how much variation in the original data each PC accounts for
pca.var.per <- round(pca.var/sum(pca.var)*100, 1) #percentages, more valuable info
meta <- select(pcaData, -PC1, -PC2)
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
right_join(meta, by = c("sample_name" = "name"))
ggplot(data=pca.data, aes(x=PC1,y=PC2, label = hiPSC_line.line, color=study_day, shape=Treatment)) +
geom_point(size = 4) +
labs(x=paste0("PC1: ",round(pca.var.per[1]),"%"),
y=paste0("PC2: ",round(pca.var.per[2]),"%")) +
geom_label_repel(box.padding = 0.5) +
theme_bw() +
#scale_color_lancet() +
#scale_fill_lancet() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("PCA") +
theme(legend.position = "right", plot.title = element_text(hjust=0.5))
# plot
ggplot(pca.data, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Advanced PCA - all genes included")
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation") #scree plot
setwd("~/OneDrive - Charité - Universitätsmedizin Berlin/Schuelke_Lab/EG15_RNA_Seq/Brain_organoids/Figures")
setwd("~/OneDrive - Charité - Universitätsmedizin Berlin/Schuelke_Lab/EG15_RNA_Seq/Brain_organoids")
### set output paths
figures_path <- "~/OneDrive - Charité - Universitätsmedizin Berlin/Schuelke_Lab/EG15_RNA_Seq/Brain_organoids/Figures"
ggsave("PCA_final_labels.png" , device=png, dpi = 600, path = figures_path, bg = "transparent", width = 20, height = 12, units = "cm" )
pcaData <- plotPCA(vsd, intgroup=c("Treatment", "study_day", "hiPSC_line.line"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Standard PCA - top 500 genes")
ggsave("PCA_final_labels.png" , device=png, dpi = 600, path = figures_path, bg = "transparent", width = 20, height = 12, units = "cm" )
ggsave("PCA_top500.png" , device=png, dpi = 600, path = figures_path, bg = "transparent", width = 20, height = 12, units = "cm" )
pca <- prcomp(t(counts(dds)), scale=F) #Calculate PCs, need to transpose cause prcomp expects samples as rows and genes as columns
#plot(pca$x[,1], pca$x[,2]) #2D plot of the first 2 Principal components (PCs are contained in x of PCA)
pca.var <- pca$sdev^2 # squared standard deviation, says how much variation in the original data each PC accounts for
pca.var.per <- round(pca.var/sum(pca.var)*100, 1) #percentages, more valuable info
meta <- select(pcaData, -PC1, -PC2)
pca.data <- data.frame(sample_name=rownames(pca$x),
PC1=pca$x[,1],
PC2=pca$x[,2]) %>%
right_join(meta, by = c("sample_name" = "name"))
# plot
ggplot(pca.data, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Advanced PCA - all genes included")
ggsave("PCA_all_genes.png" , device=png, dpi = 600, path = figures_path, bg = "transparent", width = 20, height = 12, units = "cm" )
# plot
ggplot(pca.data, aes(PC1, PC2, color=study_day, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_light(base_size = 12)+
geom_text_repel(aes(label = hiPSC_line.line),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
max.overlaps = 100)+
ggtitle("Advanced PCA - all genes included")
#Cell Death Assay using Mitochondrial RNA presence
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl") #retrieves human database GRCh38.p13
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl") #retrieves human database GRCh38.p13
filters_ensembl = listFilters(ensembl)
filters_ensembl[1:15,]
searchFilters(mart = ensembl, pattern = "MT")
listFilterValues(mart = ensembl, filter = "chromosome_name")
attributes_ensembl = listAttributes(ensembl)
attributes_ensembl[1:10,]
ensembl_mitochondrial <- getBM(mart=ensembl, attributes = c("ensembl_gene_id", "chromosome_name"), filters = "chromosome_name", values="MT")
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts, rownames(counts) %in% ensembl_mitochondrial$ensembl_gene_id)
View(countData)
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(countData, rownames(countData) %in% ensembl_mitochondrial$ensembl_gene_id)
View(mitochondrial_counts)
View(ensembl_mitochondrial)
View(countData)
rownames(countData)
#Determine which genes have the largest effect using loading scores
loading_scores <- pca$rotation[,1] # effects due to PC1
gene_scores <- abs(loading_scores) #so we can compare both negative and positive effects
gene_score_ranked <- sort(gene_scores, decreasing=T)
top_10_genes <- names(gene_score_ranked[1:10]) #extracts names of the top 10 genes
top_10_genes
pca$rotation[top_10_genes,1] #shows who has positive and who has negative effects
#Determine which genes have the largest effect on Variance using loading scores
loading_scores <- pcaData$rotation[,1] # effects due to PC1
gene_scores <- abs(loading_scores) #so we can compare both negative and positive effects
View(pca)
#Determine which genes have the largest effect on Variance using loading scores
loading_scores <- percentVar$rotation[,1] # effects due to PC1
#Determine which genes have the largest effect on Variance using loading scores
loading_scores <- vsd$rotation[,1] # effects due to PC1
gene_scores <- abs(loading_scores) #so we can compare both negative and positive effects
#Determine which genes have the largest effect on Variance using loading scores
loading_scores <- pca$rotation[,1] # effects due to PC1
gene_scores <- abs(loading_scores) #so we can compare both negative and positive effects
gene_score_ranked <- sort(gene_scores, decreasing=T)
top_10_genes <- names(gene_score_ranked[1:10]) #extracts names of the top 10 genes
top_10_genes
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup="study_day")
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup="Treatment")
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup=c("study_day","Treatment"))
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup="study_day")
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup="Treatment")
plotCounts(dds, gene="ENSG00000111640.15|GAPDH", intgroup=c("study_day","Treatment"))
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(countData, "IDs" = rownames(countData))
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.dataframe(countData), "IDs" = rownames(countData))
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData))
View(counts_formatted)
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, ".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs,"IDs" ,".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs,into="IDs" ,sep=".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs,into="ID" ,sep=".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs ,sep=".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs ,".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, "new_IDs",".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, "new_IDs","\.", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, "new_IDs",".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, ".", extra="drop")
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, ".", extra="drop") %>%
rename("new_IDs" = ".")
rownames(counts_formatte) <- counts_formatted$new_IDs
rownames(counts_formatted) <- counts_formatted$new_IDs
### ENSEMBL ID need to be in the same format
counts_formatted <- mutate(as.data.frame(countData), "IDs" = rownames(countData)) %>%
separate(IDs, ".", extra="drop") %>%
rename("new_IDs" = ".")
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts_formatted, counts_formatted$new_IDs %in% ensembl_mitochondrial$ensembl_gene_id)
View(mitochondrial_counts)
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts_formatted, counts_formatted$new_IDs %in% ensembl_mitochondrial$ensembl_gene_id) %>%
select(-new_IDs)
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts_formatted, counts_formatted$new_IDs %in% ensembl_mitochondrial$ensembl_gene_id)
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts_formatted, counts_formatted$new_IDs %in% ensembl_mitochondrial$ensembl_gene_id) %>%
select(-"new_IDs")
mitochondrial_counts <- select(mitochondrial_counts, -new_IDs)
mitochondrial_counts <- mitochondrial_counts[1:(length(mitochondrial_counts)-1)]
#plot the mitochondrial RNA counts
library(reshape2)
longData<-melt(mitochondrial_counts)
longData<-longData[longData$value!=0,]
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
#plot the mitochondrial RNA counts
library(reshape2)
longData<-melt(mitochondrial_counts)
View(longData)
longData<-longData[longData$value!=0,]
View(longData)
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = variable, y = value)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
#subset(m, rownames(m) %in% include_list)
mitochondrial_counts <- subset(counts_formatted, counts_formatted$new_IDs %in% ensembl_mitochondrial$ensembl_gene_id)
#plot the mitochondrial RNA counts
library(reshape2)
longData<-melt(mitochondrial_counts)
longData<-longData[longData$value!=0,]
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = variable, y = new_IDs)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = new_IDs, y = value)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = new_IDs, y = variable)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = new_IDs, y = variable)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="sample", title="Mitichondrial RNA analysis") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = new_IDs, y = variable)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(y="sample", title="Mitichondrial RNA analysis") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(longData, aes(x = new_IDs, y = variable)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red") +
labs(y="sample", x="ENSEMBL ID", title="Mitichondrial RNA analysis") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=90),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
